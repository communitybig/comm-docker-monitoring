#!/bin/bash

# Get the current non-root user
CURRENT_USER=$(who | awk 'NR==1{print $1}')
CONFIG_DIR="/etc/docker-biglinux/comm-docker-monitoring"

# Function to check if a command is available
check_cmd() {
    if ! command -v "$1" >/dev/null 2>&1; then
        echo "Error: Command '$1' is not installed. Please install it before continuing."
        exit 1
    fi
}

# Function to create directories if they don't exist
create_dir() {
    local dir=$1
    if [ ! -d "$dir" ]; then
        echo "Creating directory: $dir"
        mkdir -p "$dir"
    else
        echo "Directory already exists: $dir"
    fi
}

# Function to copy files if they don't exist
copy_file() {
    local src=$1
    local dest=$2
    if [ ! -f "$dest" ]; then
        echo "Copying file: $src -> $dest"
        cp -r "$src" "$dest"
    else
        echo "File already exists: $dest"
    fi
}

# Function to set permissions for created directories
set_permissions() {
    local path=$1
    echo "Setting permissions for: $path"
    chown -R $CURRENT_USER:$CURRENT_USER "$path"
    chmod -R 755 "$path"
}

# Executed after package installation
post_install() {
    echo "Starting installation process..."

    # Check if required commands are available
    check_cmd "docker"
    check_cmd "docker-compose"

    # Create necessary directories for Grafana and Prometheus
    echo "Checking and creating necessary directories..."
    create_dir "/home/$CURRENT_USER/Docker/Monitoring/Grafana/data"
    create_dir "/home/$CURRENT_USER/Docker/Monitoring/Grafana/config"
    create_dir "/home/$CURRENT_USER/Docker/Monitoring/Prometheus/data"
    create_dir "/home/$CURRENT_USER/Docker/Monitoring/Prometheus/config"

    # Copy configuration files
    echo "Checking and copying configuration files..."
    copy_file "$CONFIG_DIR/grafana/config/provisioning/dashboards" "/home/$CURRENT_USER/Docker/Monitoring/Grafana/config/provisioning/dashboards"
    copy_file "$CONFIG_DIR/grafana/config/provisioning/datasources/datasource.yml" "/home/$CURRENT_USER/Docker/Monitoring/Grafana/config/provisioning/datasources/datasource.yml"
    copy_file "$CONFIG_DIR/prometheus/config/prometheus.yml" "/home/$CURRENT_USER/Docker/Monitoring/Prometheus/config/prometheus.yml"

    # Adjust permissions
    set_permissions "/home/$CURRENT_USER/Docker/Monitoring"

    # Create symbolic link for docker-compose.yml
    echo "Creating symbolic link for docker-compose.yml..."
    ln -sf "$CONFIG_DIR/compose-monitor.yml" "/home/$CURRENT_USER/Docker/Monitoring/docker-compose.yml"

    # Start Docker services
    echo "Starting Docker services..."
    HOME=/home/$CURRENT_USER docker compose -f /home/$CURRENT_USER/Docker/Monitoring/docker-compose.yml up -d
    if [ $? -ne 0 ]; then
        echo "Error starting Docker services."
        exit 1
    fi

    echo "Installation completed! Services are running."
}

# Upgrade the package
post_upgrade() {
    echo "Upgrading the package..."
    post_install
}

# Executed before package removal
pre_remove() {
    echo "Stopping and removing Docker services..."
    HOME=/home/$CURRENT_USER docker compose -f /home/$CURRENT_USER/Docker/Monitoring/docker-compose.yml down
    if [ $? -ne 0 ]; then
        echo "Error stopping Docker services."
        exit 1
    fi

    echo "Removing configuration and data directories..."
    rm -rf "/home/$CURRENT_USER/Docker/Monitoring"
    echo "Services and files removed successfully."
}

# Executed after package removal
post_remove() {
    echo "Removing related Docker images..."
    docker rmi gcr.io/cadvisor/cadvisor:latest || echo "Error removing cadvisor image."
    docker rmi prom/prometheus:latest || echo "Error removing prometheus image."
    docker rmi grafana/grafana:latest || echo "Error removing grafana image."

    echo "Docker images removed successfully."
}